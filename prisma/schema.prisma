// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  image         String
  email         String    @unique
  emailVerified DateTime?

  Account     Account[]
  Session     Session[]
  File        File[]
  CoverLetter CoverLetter[]
  Generation  Generation[]
}

enum UploadStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  CoverLetter CoverLetter[]
}

model CoverLetter {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updattedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String
  file     File   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Generation {
  id     String   @id @default(cuid())
  type   String
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
