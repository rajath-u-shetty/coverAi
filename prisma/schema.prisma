generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String
  image         String
  email         String        @unique
  emailVerified DateTime?
  Account       Account[]
  CoverLetter   CoverLetter[]
  File          File[]
  Generation    Generation[]
  Session       Session[]
}

model File {
  id                       String        @id @default(cuid())
  name                     String        @unique
  uploadStatus             UploadStatus  @default(PENDING)
  url                      String
  key                      String
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  userId                   String?
  coverLettersAsAttachment CoverLetter[] @relation("AttachmentFile")
  coverLettersAsResume     CoverLetter[] @relation("ResumeFile")
  user                     User?         @relation(fields: [userId], references: [id])
}

model CoverLetter {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  resumeId  String
  fileName  String
  updatedAt DateTime @updatedAt
  file      File     @relation("AttachmentFile", fields: [fileName], references: [name], onDelete: Cascade)
  resume    File     @relation("ResumeFile", fields: [resumeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Generation {
  id     String   @id @default(cuid())
  type   String
  date   DateTime @default(now())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UploadStatus {
  PENDING
  FAILED
  SUCCESSFUL
}
